package com.example.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Note;
import com.example.demo.service.NoteService;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/notes")
public class NoteController {

	private NoteService noteService;

	public NoteController(@Autowired NoteService noteService) {
		this.noteService = noteService;
	}

	@PostMapping("/save")
	public ResponseEntity<Note> saveNote(@RequestBody Note note) {
		Note newNote = this.noteService.saveNote(note);
		return ResponseEntity.status(HttpStatus.CREATED).body(newNote);
	}

	@GetMapping("/get/{id}")
	public ResponseEntity<Optional<Note>> getNote(@RequestParam("id") Long id) {
		Optional<Note> note = this.noteService.getNoteById(id);
		if (note.isPresent()) {
			return ResponseEntity.ok().body(note);
		} else {
			return ResponseEntity.notFound().build();
		}
	}

	@GetMapping("/get")
	public ResponseEntity<List<Note>> getAllNotes() {
		List<Note> notes = this.noteService.getAllNotes();
		return ResponseEntity.ok().body(notes);
	}

	@PostMapping("/update/{id}")
	public ResponseEntity<Optional<Note>> updateNote(@PathVariable("id") Long id, @RequestBody Note newData) {
		Optional<Note> updatedNote = this.noteService.updateNote(id, newData);
		if (updatedNote.isPresent()) {
			return ResponseEntity.accepted().body(updatedNote);
		} else {
			return ResponseEntity.badRequest().body(updatedNote);
		}
	}
	@DeleteMapping("/delete/{id}")
	public void deleteNote(@RequestParam("id") Long id) {
		Long deletedNoteId = this.noteService.deleteNoteById(id);
		if (deletedNoteId.)
	}

	public NoteService getNoteService() {
		return noteService;
	}

	public void setNoteService(NoteService noteService) {
		this.noteService = noteService;
	}
}
